"use strict";(self.webpackChunkdatakit_docs=self.webpackChunkdatakit_docs||[]).push([[284],{5678:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>d,toc:()=>r});var s=i(4848),a=i(8453);const n={},l="StatusIndicatorField",d={id:"Fields/status-indicator-field",title:"StatusIndicatorField",description:"The StatusIndicatorField is a field which shows a badge like element, which represents a state, for example: Active or",source:"@site/docs/Fields/30-status-indicator-field.md",sourceDirName:"Fields",slug:"/Fields/status-indicator-field",permalink:"/Fields/status-indicator-field",draft:!1,unlisted:!1,editUrl:"https://github.com/UseDataKit/SDK/edit/main/docs/Fields/30-status-indicator-field.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{},sidebar:"docs",previous:{title:"LinkField",permalink:"/Fields/link-field"}},c={},r=[{value:"Boolean type (true: Active or false: Inactive)",id:"boolean-type-true-active-or-false-inactive",level:2},{value:"Mapping type (every values maps to a status type)",id:"mapping-type-every-values-maps-to-a-status-type",level:2},{value:"Applying field settings",id:"applying-field-settings",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"statusindicatorfield",children:"StatusIndicatorField"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"StatusIndicatorField"})," is a field which shows a badge like element, which represents a state, for example: Active or\nInactive. The StatusIndicator contains the following state options:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"active"}),": A green status indicator with the value ",(0,s.jsx)(t.code,{children:"Active"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"inactive"}),": A grey status indicator with the value ",(0,s.jsx)(t.code,{children:"Inactive"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"info"}),": A blue status indicator with the value ",(0,s.jsx)(t.code,{children:"Info"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"warning"}),": An orange status indicator with the value ",(0,s.jsx)(t.code,{children:"Warning"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"error"}),": A red status indicator with the value ",(0,s.jsx)(t.code,{children:"Error"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"boolean-type-true-active-or-false-inactive",children:"Boolean type (true: Active or false: Inactive)"}),"\n",(0,s.jsxs)(t.p,{children:["By default, the field has a boolean behavior. The value will be interpreted truthy or falsy. For ",(0,s.jsx)(t.code,{children:"true"})," values it will\nshow an ",(0,s.jsx)(t.code,{children:"Active"})," status, and for ",(0,s.jsx)(t.code,{children:"false"})," values it will show the ",(0,s.jsx)(t.code,{children:"Inactive"})," status. However, the states used can be\noverwritten by calling the ",(0,s.jsx)(t.code,{children:"->boolean(string $true, string $false)"})," modifier method with the desired states."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use DataKit\\DataViews\\Field\\StatusIndicatorField;\n\n// Use an warning state for falsy values.\n$status = StatusIndicatorField::create( 'status', 'Status' )\n    ->boolean( StatusIndicatorField::STATUS_ACTIVE, StatusIndicatorField::STATUS_WARNING );\n"})}),"\n",(0,s.jsx)(t.h2,{id:"mapping-type-every-values-maps-to-a-status-type",children:"Mapping type (every values maps to a status type)"}),"\n",(0,s.jsxs)(t.p,{children:["An alternative option is to show a specific state for a specific value. To set this up, you can call the\n",(0,s.jsx)(t.code,{children:"->mapping( string $active, ?string $inactive = null, ...)"})," modifier method. In the next example any ",(0,s.jsx)(t.code,{children:"active"})," value will\nbe displayed as an ",(0,s.jsx)(t.code,{children:"Active"})," state, and the value of ",(0,s.jsx)(t.code,{children:"concept"})," will be displayed as a ",(0,s.jsx)(t.code,{children:"Info"})," state. All other values\nwill automatically default to the ",(0,s.jsx)(t.code,{children:"Inactive"})," state."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use DataKit\\DataViews\\Field\\StatusIndicatorField;\n\n$status = StatusIndicatorField::create( 'status', 'Status' )\n    ->mapping( 'active', null, null, 'concept' )\n    ->show_value(); // Show the value as the text.\n"})}),"\n",(0,s.jsx)(t.h2,{id:"applying-field-settings",children:"Applying field settings"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"->boolean( string $true, string $false )"})," Makes the field a boolean field with specific state types."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"->mapping( string $active, ?string $inactive, ... )"})," Makes the field a mapping field with a state per value."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"->show_value()"})," Makes the field display the value as the text."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"->show_label()"})," Makes the field display the status label as the text."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>d});var s=i(6540);const a={},n=s.createContext(a);function l(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);